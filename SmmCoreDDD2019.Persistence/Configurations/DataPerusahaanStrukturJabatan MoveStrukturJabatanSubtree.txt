
                            CREATE PROCEDURE [dbo].[MoveStrukturJabatanSubtree]
	                            @NoUrutStrukturID INT
	                            , @NewParent INT
	                            , @Debug BIT = 0
                            AS
                            BEGIN
	                            SET NOCOUNT ON;

	                            --Disable triggers during operations
	                            ALTER TABLE DataPerusahaan.DataPerusahaanStrukturJabatan DISABLE TRIGGER trg_DataPerusahaanStrukturJabatan_DEL;
	                            ALTER TABLE DataPerusahaan.DataPerusahaanStrukturJabatan DISABLE TRIGGER trg_DataPerusahaanStrukturJabatan_INS;
	                            ALTER TABLE DataPerusahaan.DataPerusahaanStrukturJabatan DISABLE TRIGGER trg_DataPerusahaanStrukturJabatan_UPD;

	                            --Treat 0/-1/NULL the same: means we want to make the top of this subtree a Root node
	                            IF (@NewParent <= 0 OR @NewParent IS NULL)
	                            BEGIN
		                            SET @NewParent = -1;
	                            END

	                            --Cannot move a subtree under itself
	                            ELSE IF @NewParent IN (
		                            SELECT SubCat.NoUrutStrukturID
		                            FROM DataPerusahaan.DataPerusahaanStrukturJabatan Cat
		                            JOIN DataPerusahaan.DataPerusahaanStrukturJabatan SubCat
				                            ON SubCat.Lft BETWEEN Cat.Lft AND Cat.Rgt
		                            WHERE Cat.NoUrutStrukturID = @NoUrutStrukturID)
	                            BEGIN
		                            RAISERROR (N'Cannot move subtree to a node within itself.', 18, 1);
		                            RETURN;
	                            END

	                            --Cannot move subtree to a node that doesnt exist
	                            ELSE IF NOT EXISTS (SELECT 1 FROM DataPerusahaan.DataPerusahaanStrukturJabatan WHERE NoUrutStrukturID = @NewParent)
	                            BEGIN
		                            RAISERROR (N'Cannot move subtree to a node that doesn''t exist.', 18, 1);
		                            RETURN;
	                            END

	                            --Cannot move subtree that doesnt exist
	                            ELSE IF NOT EXISTS (SELECT 1 FROM DataPerusahaan.DataPerusahaanStrukturJabatan WHERE NoUrutStrukturID = @NoUrutStrukturID)
	                            BEGIN
		                            RAISERROR (N'Cannot move subtree that doesn''t exist.', 18, 1);
		                            RETURN;
	                            END

	                            --Get old Parent & Subtree size
	                            DECLARE @OldParent INT
		                            , @SubtreeSize INT
		                            , @SubtreeOldLeft INT
		                            , @SubtreeOldRight INT
		                            , @SubtreeOldDepth INT

	                            SELECT @OldParent = Parent,  @SubtreeSize = Rgt - Lft + 1
		                            , @SubtreeOldLeft = Lft, @SubtreeOldRight = Rgt, @SubtreeOldDepth = Depth
	                            FROM DataPerusahaan.DataPerusahaanStrukturJabatan
	                            WHERE NoUrutStrukturID = @NoUrutStrukturID

	                            --Cannot move subtree to its own Parent, i.e. there's nothing to do b/c new parent is same as old
	                            IF @OldParent = @NewParent
	                            BEGIN
		                            RAISERROR (N'Cannot move subtree to its own parent.', 18, 1);
		                            RETURN;
	                            END

	                            --Get new Parent position
	                            DECLARE @NewParentRight INT
		                            , @NewParentDepth INT;

	                            --If we're going Root, place it to the Right of existing Roots
	                            IF @NewParent = -1
	                            BEGIN
		                            SELECT @NewParentRight = MAX(Rgt) + 1, @NewParentDepth = -1
		                            FROM DataPerusahaan.DataPerusahaanStrukturJabatan
	                            END
	                            --Else, place it to the Right of its new siblings-to-be
	                            ELSE
	                            BEGIN
		                            SELECT @NewParentRight = Rgt, @NewParentDepth = Depth
		                            FROM DataPerusahaan.DataPerusahaanStrukturJabatan
		                            WHERE NoUrutStrukturID = @NewParent
	                            END

	                            --Get new positions for use
	                            SELECT NoUrutStrukturID
		                            , Lft + @NewParentRight - @SubtreeOldLeft AS PLeft
		                            , Rgt + @NewParentRight - @SubtreeOldLeft AS PRight
		                            , Depth + (@NewParentDepth - @SubtreeOldDepth) + 1 AS Depth
	                            INTO #MoveNodes
	                            FROM DataPerusahaan.DataPerusahaanStrukturJabatan
	                            WHERE NoUrutStrukturID IN (
		                            SELECT SubCat.NoUrutStrukturID
		                            FROM DataPerusahaan.DataPerusahaanStrukturJabatan Cat
		                            JOIN DataPerusahaan.DataPerusahaanStrukturJabatan SubCat
				                            ON SubCat.Lft BETWEEN Cat.Lft AND Cat.Rgt
		                            WHERE Cat.NoUrutStrukturID = @NoUrutStrukturID
	                            )

	                            IF (@Debug = 1)
		                            SELECT * FROM #MoveNodes
		                            ORDER BY PLeft

	                            --Make gap in tree (at destination branch) equal to the SubtreeSize
	                            UPDATE DataPerusahaan.DataPerusahaanStrukturJabatan
	                            SET Lft = CASE WHEN Lft > @NewParentRight THEN Lft + @SubtreeSize ELSE Lft END,
		                            Rgt = CASE WHEN Rgt >= @NewParentRight THEN Rgt + @SubtreeSize ELSE Rgt END
	                            WHERE Rgt >= @NewParentRight

	                            --Update Subtree positions to new ones
	                            UPDATE DataPerusahaan.DataPerusahaanStrukturJabatan
	                            SET Lft = #MoveNodes.PLeft, Rgt = #MoveNodes.PRight, Depth = #MoveNodes.Depth
	                            FROM DataPerusahaan.DataPerusahaanStrukturJabatan
	                            JOIN #MoveNodes
			                            ON DataPerusahaan.DataPerusahaanStrukturJabatan.NoUrutStrukturID = #MoveNodes.NoUrutStrukturID

	                            --Maintain the Adjacency-List part (set ParentID)
	                            UPDATE DataPerusahaan.DataPerusahaanStrukturJabatan
	                            SET Parent = (CASE WHEN @NewParent = -1 THEN NULL ELSE @NewParent END)
	                            WHERE NoUrutStrukturID = @NoUrutStrukturID

	                            --Close gaps, i.e. after the Subtree is gone from its old Parent, said old parent node has no children;
	                            --while nodes to the right & above now have inflated values, except where they include the newly moved subtree.
	                            UPDATE DataPerusahaan.DataPerusahaanStrukturJabatan
	                            SET Lft = CASE WHEN Lft > @SubtreeOldRight THEN Lft - @SubtreeSize ELSE Lft END,
		                            Rgt = CASE WHEN Rgt >= @SubtreeOldRight THEN Rgt - @SubtreeSize ELSE Rgt END
	                            WHERE Rgt >= @SubtreeOldRight

	                            --Re-enable triggers when done
	                            ALTER TABLE DataPerusahaan.DataPerusahaanStrukturJabatan ENABLE TRIGGER trg_DataPerusahaanStrukturJabatan_DEL;
	                            ALTER TABLE DataPerusahaan.DataPerusahaanStrukturJabatan ENABLE TRIGGER trg_DataPerusahaanStrukturJabatan_INS;
	                            ALTER TABLE DataPerusahaan.DataPerusahaanStrukturJabatan ENABLE TRIGGER trg_DataPerusahaanStrukturJabatan_UPD;
                            END
                             

            